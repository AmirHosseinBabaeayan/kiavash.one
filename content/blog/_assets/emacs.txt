(require 'package)
(let* ((no-ssl (and (memq system-type '(windows-nt ms-dos))
                    (not (gnutls-available-p))))
       (proto (if no-ssl "http" "https")))
  (add-to-list 'package-archives (cons "melpa" (concat proto "://melpa.org/packages/")) t)
  (when (< emacs-major-version 24)
    (add-to-list 'package-archives '("gnu" . (concat proto "://elpa.gnu.org/packages/")))))

(add-to-list 'load-path "~/.emacs.d/elpa/")

(package-initialize)


;; cua mode
(setq cua-auto-tabify-rectangles nil) ;; Don't tabify after rectangle commands
(transient-mark-mode 1) ;; No region when it is not highlighted
(setq cua-keep-region-after-copy t) ;; Standard Windows behaviour
(cua-mode t)

;; Background mode
(setq-default frame-background-mode 'dark)

;;line number
(global-linum-mode t)
(setq linum-format "%4d \u2502 ")

;; theme
(load-theme 'atom-one-dark t)

;; keybinds
(define-key global-map (kbd "RET") 'newline-and-indent)
(global-set-key (kbd "TAB") 'self-insert-command)

;; Set tab/space size
(setq-default indent-tabs-mode 'nil)
(defvaralias 'c-basic-offset 'tab-width)
(setq-default tab-width 4)
(setq-default indent-line-function 'insert-tab)

;; Autocomplete mode
(global-auto-complete-mode t)


;; Brackets Matching
(show-paren-mode 1)
(setq-default show-paren-delay 0)
;; auto close bracket insertion. New in emacs 24
(electric-pair-mode 1)


;; Powerline support
(require 'powerline)
;;(powerline-default-theme)
(powerline-center-theme)


;; Smooth scrolling
(setq mouse-wheel-scroll-amount '(2 ((shift) . 2))) ;;
(setq mouse-wheel-follow-mouse 't) ;;
(setq scroll-step 1) ;;
(setq mouse-wheel-progressive-speed nil)
(setq scroll-conservatively 10000)
(setq scroll-margin 1
      scroll-conservatively 0
      scroll-up-aggressively 0.01
      scroll-down-aggressively 0.01)
(setq-default scroll-up-aggressively 0.01
scroll-down-aggressively 0.01)


;; Make unix unicode default
(setq-default default-buffer-file-coding-system 'utf-8-unix)

;; Minimap
(minimap-mode t)
(setq-default minimap-window-location 'right)
(setq-default minimap-minimum-width 14)
(setq-default minimap-recreate-window t)
(setq-default minimap-width-fraction 0.10)
(unless (display-graphic-p)                                                               
  (minimap-mode -1))
(add-hook 'minimap-sb-mode-hook (lambda () (setq mode-line-format nil)))


;; VC control mode
(require 'diff-hl)
(global-diff-hl-mode)



;; Neotree setup
(require 'neotree)
(require 'all-the-icons)
(setq neo-window-fixed-size nil)
;;'(neo-window-width 20)
(setq neo-theme (if (display-graphic-p) 'icons 'fileicons))
;;(setq neo-theme (if (display-graphic-p) 'icons 'arrow))

(global-set-key [f5] 'neotree-toggle)

(global-set-key [f6] 'tabbar-backward-tab)
(global-set-key [f7] 'tabbar-forward-tab)

(global-set-key [f8] 'kill-buffer)
(global-set-key [f9] 'kill-buffer-and-window)

;; tabbar
(defun my-tabbar-buffer-groups () ;; customize to show all normal files in one group
  (list (cond ((string-equal "*" (substring (buffer-name) 0 1)) "emacs")
              ((eq major-mode 'dired-mode) "emacs")
              (t "user"))))
(setq tabbar-buffer-groups-function 'my-tabbar-buffer-groups)

(require 'tabbar)
;; Tabbar settings
(set-face-attribute
 'tabbar-default nil
 :background "gray20"
 :foreground "gray20"
 :box '(:line-width 1 :color "gray20" :style nil))
(set-face-attribute
 'tabbar-unselected nil
 :background "gray30"
 :foreground "white"
 :box '(:line-width 5 :color "gray30" :style nil))
(set-face-attribute
 'tabbar-selected nil
 :background "gray75"
 :foreground "black"
 :box '(:line-width 5 :color "gray75" :style nil))
(set-face-attribute
 'tabbar-highlight nil
 :background "white"
 :foreground "black"
 :underline nil
 :box '(:line-width 5 :color "white" :style nil))
(set-face-attribute
 'tabbar-button nil
 :box '(:line-width 1 :color "gray20" :style nil))
(set-face-attribute
 'tabbar-separator nil
 :background "gray20"
 :height 0.6)

;; Change padding of the tabs
;; we also need to set separator to avoid overlapping tabs by highlighted tabs
(custom-set-variables
 '(tabbar-separator (quote (0.5))))
;; adding spaces
(defun tabbar-buffer-tab-label (tab)
  "Return a label for TAB.
That is, a string used to represent it on the tab bar."
  (let ((label  (if tabbar--buffer-show-groups
                    (format "[%s]  " (tabbar-tab-tabset tab))
                  (format "%s  " (tabbar-tab-value tab)))))
    ;; Unless the tab bar auto scrolls to keep the selected tab
    ;; visible, shorten the tab label to keep as many tabs as possible
    ;; in the visible area of the tab bar.
    (if tabbar-auto-scroll-flag
        label
      (tabbar-shorten
       label (max 1 (/ (window-width)
                       (length (tabbar-view
                               (tabbar-current-tabset)))))))))

(tabbar-mode t)




;; Backup in one place. flat, no tree structure
(setq backup-directory-alist '(("" . "~/.emacs.d/emacs-backup")))





















(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(custom-safe-themes
   (quote
    ("57f95012730e3a03ebddb7f2925861ade87f53d5bbb255398357731a7b1ac0e0" default)))
 '(package-selected-packages
   (quote
    (tabbar all-the-icons neotree diff-hl minimap powerline atom-one-dark-theme auto-complete))))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )
